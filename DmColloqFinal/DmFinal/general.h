// Файл, содержащий основные типы и частично их ввод-вывод:
//  - Длинное натуральное число N
//  - Длинное целое число Z
//  - Длинное рациональное число в виде дроби Q
//  - Многочлен с рациональными (Q) коэффициентами P
//  Ввод (пользовательский) записывается в стиле readИмя_типа(адрес стр-ры) (напр. readN(&n1) )
//  Вывод в консоль записывается в стиле writeИмя_типа(адрес стр-ры) (напр. writeP(&p1) )

#pragma once

const int ARR_SIZE = 100;   // кол-во ячеек массива в любом типе

// Длинное натуральное число
struct N {
    int n;              // порядок числа (начиная с 0)
    char a[ARR_SIZE];   // цифры числа, записанные с нулевого элемента массива в обратном порядке
};

// Длинное целое число
struct Z {
    bool b;             // знак числа (true - положительное)
    int n;              // порядок числа (начиная с 0)
    char a[ARR_SIZE];   // цифры числа, записанные с нулевого элемента массива в обратном порядке
};

// Длинное рациональное число в виде дроби Z/N
struct Q {
    Z numerator;        // числитель
    N denominator;      // знаменатель
};

// Многочлен с рациональными коэффициентами:
struct P {
    int degree;                 // степень многочлена (начиная с 0)
    Q coefficients[ARR_SIZE];   // коэфициенты многочлена, где степени при X соответствует порядковый номер ячейки массива
};

// Примеры:
// N n1 = { 2, { 3, 0, 1} };                    // запись числа 103:
// Z z1 = { false, 4, { 5, 4, 3, 2, 1 } };      // запись числа -12345:
// Q q1 = { z1, n1 };                       // запись рационального числа -12345/103:
// Q nullQ = { { true, 0, { 0 } }, { 0, { 1 } } };
// P p1 = {
//      4,
//      {
//          nullQ, q1, nullQ, nullQ,
//          {
//              { true, 0, { 2 } },
//              { 0, { 1 } }
//          }
//      }
// };                     // запись многочлена 2x^4 - 12345/103x
// Если заранее определить q2 = 2, то запись можно сократить:
// P p1 = { 4, { 0, q1, 0, 0, q2 } };


// Ввод:
bool readN(N *);        // возвращяется успешность чтения
bool readZ(Z *);        // \n после вводимых чисел НЕ остаётся в буфере консоли
bool readQ(Q *);        // возвращает успешность ввода
bool readP(P *);

// Вывод:
void writeN(const N *);     // вывод без перевода строки
void writeZ(const Z *);
void writeQ(const Q *);
void writeP(const P *);
